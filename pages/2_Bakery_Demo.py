import streamlit as st
import pandas as pd

# Set Wide Mode
st.set_page_config(layout="wide")

title, subtext = st.columns(2, gap="large")
title.write("# Best Bakery Demo :cupcake:")
subtext.write("")
st.write("**Note: Analysis is done by Le Business Boutique. The data used in this demo was generated by ChatGPT and do not represent accurate real-world bakery trends.")
st.write("")
df = pd.read_csv("./data/demo_data.csv")
#st.write(df)

by_flavor, top5 = st.columns(2, gap="large")

##### Count Amout of Each Kind of Cupcake Sold #####

by_flavor.write("##### Number Of Cupcakes Sold By Flavor")
by_flavor.markdown("<p style='font-size:14px'> The most popular cupcake flavors for Best Bakery are Vanilla and Red Velvet. However, Blueberry, " +
                "Chocolate, and Strawberry are not far behind. This indicates that the range of cupcake flavors " +
                "appeal to the bakery's customer base, and it is advantageous to keep all the flavors.</p>",
                unsafe_allow_html=True)


cupcake_count = df["CupcakeType"].value_counts().to_frame()
by_flavor.bar_chart(data=cupcake_count, x=None, y=None, color="#E8C454", width=0, height=0, use_container_width=True)

##### Top Five Customers By Num Purchases #####

top5.write("##### Top 5 Customers and Number of Repeat Purchases")
top5.markdown("<p style='font-size:14px'> Best Bakery's top 5 customers are Alice Smith, Charlie Brown, Frank Martinez, " +
              "Zoe Harris, and Uriel Johnson.  The top three custoemrs have made repeat purchases twice. " + 
              "This indicates that the business should encourage single purchase customers to return for a second purchase " +
              "and offer current repeat customers discounts or referral incentives to refer new customers.</p>",
              unsafe_allow_html=True)

customer_count = df["Name"].value_counts().to_frame()
top_five = customer_count.head(5)
top5.data_editor(top_five, width=650)

##### Bar Chart of Number of Customer From Each State #####

customer_by_loc, rev_per_day = st.columns(2, gap="large")

customer_by_loc.write("##### Number of Customers By State")
customer_by_loc.markdown("<p style='font-size:14px'>Based on the bar chart below, Best Bakery's main customer base is located in " +
              "California, Washington, Florida, and Texas. It would benefit Best Bakery to do more marketing and advertising to " + 
              "potenital customers in these states. Michigan and North Carolina show promising insterst, and it would be worth " +
              "testing potential growth in these geographical locations, as well.</p>",
              unsafe_allow_html=True)

area_count = df["State"].value_counts().to_frame()
customer_by_loc.bar_chart(data=area_count, color="#E8C454")

##### Revenue Per Day #####

rev_per_day.write("##### Revenue Per Day")
rev_per_day.markdown("<p style='font-size:14px'>The average revenue per day hovers around $80/day. The revenue has high " +
              "variation over time, so Best Bakery can focus efforts to increase revenue per day, as well as increase " + 
              "consistency of revenue accross multiple days.</p>",
              unsafe_allow_html=True)

rev_per_day.line_chart(df, x="PurchaseDate", y="TotalSpent", color="#E8C454")

##### Line Chart of Cupcakes Sold Over Time By Cupcake Type #####

st.write("##### Total Number of Cupcakes Sold over Time by Flavor")
st.markdown("<p style='font-size:14px'>Although Blueberry and Vanilla were popular flavors, the graphs indicate a declining " +
              "populartiy for those flavors. There is an upward trend for Chocolate, Red Velvet, and Strawberry.</p>",
              unsafe_allow_html=True)

df_cupcake_by_date = df.drop(columns=['CustomerID','Name','Email','Phone','Address','City','State','ZipCode','Email','Phone','Address','City','State','ZipCode','TotalSpent'])
cupcake_total_tracker = {"Blueberry": 0, "Chocolate": 0, "Red Velvet": 0, "Strawberry": 0, "Vanilla": 0}
cupcake_total = []
df_cupcake_by_date = df_cupcake_by_date.sort_values(by=['PurchaseDate'])
for i in range(0,len(df_cupcake_by_date.index)):
    cupcake_total_tracker[df_cupcake_by_date.iloc[i, df_cupcake_by_date.columns.get_loc("CupcakeType")]] += 1
    cupcake_total.append(cupcake_total_tracker[df_cupcake_by_date.iloc[i, df_cupcake_by_date.columns.get_loc("CupcakeType")]])

line_chart1, line_chart2, line_chart3 = st.columns(3, gap="medium")
line_chart4, line_chart5, line_chart6 = st.columns(3, gap="medium")
# line_chart5, line_chart6 = st.columns(2, gap="medium")

df_cupcake_by_date['Total'] = pd.Series(cupcake_total) 
line_chart1.write("###### Blueberry")
line_chart1.line_chart(df_cupcake_by_date.loc[df['CupcakeType'] == "Blueberry"], x="PurchaseDate", y="Total", color="#E8C454")
line_chart2.write("###### Chocolate")
line_chart2.line_chart(df_cupcake_by_date.loc[df['CupcakeType'] == "Chocolate"], x="PurchaseDate", y="Total", color="#E8C454")
line_chart3.write("###### Red Velvet")
line_chart3.line_chart(df_cupcake_by_date.loc[df['CupcakeType'] == "Red Velvet"], x="PurchaseDate", y="Total", color="#E8C454")
line_chart4.write("###### Strawberry")
line_chart4.line_chart(df_cupcake_by_date.loc[df['CupcakeType'] == "Strawberry"], x="PurchaseDate", y="Total", color="#E8C454")
line_chart5.write("###### Vanilla")
line_chart5.line_chart(df_cupcake_by_date.loc[df['CupcakeType'] == "Vanilla"], x="PurchaseDate", y="Total", color="#E8C454")

##### How Much Money Each Cupcake Brings In #####
